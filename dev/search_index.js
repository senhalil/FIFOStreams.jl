var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = FIFOStreams","category":"page"},{"location":"#FIFOStreams","page":"Home","title":"FIFOStreams","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FIFOStreams]","category":"page"},{"location":"#FIFOStreams.FIFOStream","page":"Home","title":"FIFOStreams.FIFOStream","text":"FIFOStream(path::String=_mktemp(); read=false, write=!read, cleanup=true)\n  -> UnixFIFOStream (on Unix) / FallbackFIFOStream (on non-Unix)\n\nAn abstract type for either writing to, or reading from external commands through Unix pipes or temporary files. All subtypes T<:FIFOStream implement the following interface:\n\nCreate stream s, optionally from specific path: s = T([path::String]; opts...)\nAttach an external command that reads from / writes to that path: attach(s, `foo $(path(s))`[, stdios...])\nWrite to / read from the stream, just like any other IO object\nClose the stream with close(s; rm=s.cleanup)\n\nExamples\n\njulia> s = FIFOStream();\n\njulia> io = IOBuffer();\n\njulia> attach(s, pipeline(`cat $(path(s))`, stdout=io));\n\njulia> print(s, \"Hello, World!\")\n\njulia> close(s)\n\njulia> Text(String(take!(io)))\nHello, World!\n\njulia> s = FIFOStream(read=true);\n\njulia> attach(s, `bash -c \"echo 'Hello, World!' > $(path(s))\"`);\n\njulia> read(s, String)\n\"Hello, World!\\n\"\n\njulia> close(s)\n\n\n\n\n\n","category":"type"},{"location":"#FIFOStreams.FIFOStreamCollection","page":"Home","title":"FIFOStreams.FIFOStreamCollection","text":"FIFOStreamCollection([T::Type{<:FIFOStream}, ]n::Integer; opts...)\n\nA collection of multiple FIFOStreams, for dealing with multiple streams conveniently.\n\nExamples\n\njulia> s = FIFOStreamCollection(2);\n\njulia> io = IOBuffer();\n\njulia> attach(s, pipeline(ignorestatus(`diff --side-by-side $(path(s, 1)) $(path(s, 2))`); stdout=io));\n\njulia> s1, s2 = s;\n\njulia> show(s1, code_lowered(cos, Tuple{Float64}))\n\njulia> show(s2, code_lowered(sin, Tuple{Float64}))\n\njulia> close(s)\n\njulia> # Text(String(take!(io))) # uncomment to show diff\n\n\n\n\n\n","category":"type"}]
}
